using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Migrations.Design;
using System.Data.Entity.Migrations.Model;
using System.Data.Entity.Migrations.Utilities;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoMigrator.Migrations
{
    public class MyCodeGenerator : CSharpMigrationCodeGenerator
    {
        static public readonly string SqlDefaultValue = "SqlDefaultValue";

        public MyCodeGenerator()
        {
            Console.WriteLine("MyCodeGenerator created");

        }
        protected override void WriteClassStart(
            string @namespace,
            string className,
            IndentedTextWriter writer,
            string @base,
            bool designer = false,
            System.Collections.Generic.IEnumerable<string> namespaces = null)
        {
            Console.WriteLine("MyCodeGenerator WriteClassStart");
            writer.WriteLine("// Generated Time: {0}", DateTime.Now);
            writer.WriteLine("// Generated By: {0}", Environment.UserName);
            writer.WriteLine();

            base.WriteClassStart(@namespace, className, writer, @base, designer, namespaces);
        }
        /// <summary>
        /// DefaultValueをConvertでAnnotationsに入れて＠onModel ここで、そこからDefaultValueSqlに移している。もっとよいやり方がありそうではあるね・・
        /// [ protected virtual void Generate(ColumnModel column, IndentedTextWriter writer, bool emitName = false) ]を見ると、column.defaultValueSqlに値があればいい
        /// で、下でそれを入れてるんだけど、Attributeで直接突っ込めば簡単なんじゃね？って気がしてきた。ただ、どこでcolumnModel を生成してるの・って話
        /// </summary>
        /// <param name="migrationId"></param>
        /// <param name="operations"></param>
        /// <param name="sourceModel"></param>
        /// <param name="targetModel"></param>
        /// <param name="namespace"></param>
        /// <param name="className"></param>
        /// <returns></returns>
        public override ScaffoldedMigration Generate(string migrationId, IEnumerable<MigrationOperation> operations, string sourceModel, string targetModel, string @namespace, string className)
        {
            Console.WriteLine("MyCodeGenerator Generate for C# code");

            Action<ColumnModel> setDefaultValueSql = (input) =>
            {
                if (input.Annotations.TryGetValue(SqlDefaultValue, out AnnotationValues values))
                {
                    input.DefaultValueSql = values?.NewValue as string;
                    input.Annotations.Remove(SqlDefaultValue);
                    //switch (Type.GetTypeCode(column.ClrType)) 
                    //{
                    //    case TypeCode.DateTime:
                    //    case TypeCode.String:
                    //        break;
                    //    case TypeCode.Int16:
                    //        Int16.TryParse(values.NewValue as string, out Int16 valueInt16);
                    //        column.DefaultValueSql = valueInt16;
                    //        break;
                    //    default:
                    //        break;
                    //}

                }
            };
            foreach (MigrationOperation operation in operations)
            {
                if (operation is CreateTableOperation) {
                    foreach (var column in (operation as CreateTableOperation).Columns)
                    {
                        setDefaultValueSql(column);
                    }
                } else if (operation is AddColumnOperation) {
                    setDefaultValueSql((operation as AddColumnOperation).Column);
                } else if (operation is AlterColumnOperation) {
                    setDefaultValueSql((operation as AlterColumnOperation).Column);
                }
            }

            return base.Generate(migrationId, operations, sourceModel, targetModel, @namespace, className);
        }
        protected override string Generate(IEnumerable<MigrationOperation> operations, string @namespace, string className)
        {
            Console.WriteLine("MyCodeGenerator Generate for primary code file");
            return base.Generate(operations, @namespace, className);
        }
        protected override string Generate(string migrationId, string sourceModel, string targetModel, string @namespace, string className)
        {
            Console.WriteLine("MyCodeGenerator Generate for code behind file");
            return base.Generate(migrationId, sourceModel, targetModel, @namespace, className);
        }
    }
}
